const axios = require('axios');
const fs = require('fs-extra');

const cookiePath = __dirname + '/cache/cookie.json';
const appstatePath = __dirname + "/../../appstate.json";  

module.exports = {
    config: {
        name: "cap",
        version: "1.3.0",
        description: "Ch·ª•p ·∫£nh TCN Facebook t·ª´ link, tag ho·∫∑c t·ª± ƒë·ªông c·ªßa ng∆∞·ªùi d√πng l·ªánh, ho·∫∑c ch·ª•p ·∫£nh website t·ª´ link HTTP/HTTPS",
        commandCategory: "Ti·ªán √≠ch",
        usages: "[link Facebook ho·∫∑c website] ho·∫∑c [tag ng∆∞·ªùi d√πng] ho·∫∑c kh√¥ng nh·∫≠p g√¨",
        cooldowns: 5,
    },

    onLoad: () => {
        if (!fs.existsSync(cookiePath)) {
            console.log("‚ö†Ô∏è File cookie kh√¥ng t·ªìn t·∫°i. H√£y th√™m file cookie h·ª£p l·ªá v√†o cache.");
        }

        if (!fs.existsSync(cookiePath)) {
            const appstate = require(appstatePath);  
            const result = appstate.map(cc => `${cc.key}=${cc.value}`).join(";"); 

            const data = JSON.stringify({ cookie: result }, null, 2);
            fs.writeFileSync(cookiePath, data); // L∆∞u v√†o cache/cookie.json
        }
    },

    run: async ({ api, event, args, Users }) => {
        const { threadID, messageID, senderID, mentions, messageReply } = event;

        const apiflashKey = "d3f1c47bdc694174bbebda2810ed6acd"; // Thay b·∫±ng key API Apiflash.com
        const imagePath = __dirname + "/cache/fbCap.png";

        
        const cookieData = JSON.parse(fs.readFileSync(cookiePath, "utf8")).cookie;

        
        let targetUserID = senderID; 
        let targetUserName = await Users.getNameUser(targetUserID);

        
        let mentionsData = [];
        if (mentions && Object.keys(mentions).length > 0) {
            mentionsData = [];
            for (let userID of Object.keys(mentions)) {
                const name = await Users.getNameUser(userID);
                mentionsData.push({
                    tag: name,
                    id: userID
                });
                targetUserID = userID;  
                targetUserName = name;  
            }
        }
        
        else if (messageReply) {
            targetUserID = messageReply.senderID;
            targetUserName = await Users.getNameUser(targetUserID);
        }

        
        if (!targetUserName) {
            targetUserName = await Users.getNameUser(targetUserID);
        }

        if (!targetUserName) {
            return api.sendMessage("‚ùé Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!", threadID, messageID);
        }

        const linkInput = args[0];
        if (/^https?:\/\/.+/.test(linkInput)) {
            api.sendMessage(`üîÑ ƒêang ch·ª•p ·∫£nh t·ª´ website: ${linkInput}, vui l√≤ng ch·ªù...`, threadID, messageID);

            try {
               const screenshotURL = `https://api.apiflash.com/v1/urltoimage?access_key=${apiflashKey}&url=${encodeURIComponent(linkInput)}&format=png&width=1200&height=800&quality=80&cookies=${encodeURIComponent(cookieData)}`;
                const screenshotData = (await axios.get(screenshotURL, { responseType: "arraybuffer" })).data;

                fs.writeFileSync(imagePath, screenshotData);

                return api.sendMessage(
                    {
                        body: `‚úÖ ƒê√£ ch·ª•p ·∫£nh t·ª´ website: ${linkInput}`,
                        attachment: fs.createReadStream(imagePath),
                    },
                    threadID,
                    () => fs.unlinkSync(imagePath),
                    messageID
                );
            } catch (error) {
                console.error(error);
                return api.sendMessage(`‚ùé L·ªói con m·∫π m√†y r·ªìi: ${error.message}`, threadID, messageID);
            }
        }

        api.sendMessage(`üîÑ ƒêang x·ª≠ l√Ω ·∫£nh TCN c·ªßa ${targetUserName}, vui l√≤ng ch·ªù...`, threadID, messageID);

        try {
            const profileLink = `https://www.facebook.com/${targetUserID}`;
            const screenshotURL = `https://api.apiflash.com/v1/urltoimage?access_key=${apiflashKey}&url=${encodeURIComponent(profileLink)}&format=png&width=1200&height=800&quality=80&cookies=${encodeURIComponent(cookieData)}`;
            const screenshotData = (await axios.get(screenshotURL, { responseType: "arraybuffer" })).data;

            fs.writeFileSync(imagePath, screenshotData);

            return api.sendMessage(
                {
                    body: `‚úÖ ƒê√£ ch·ª•p ·∫£nh TCN c·ªßa: ${targetUserName}`,
                    attachment: fs.createReadStream(imagePath),
                },
                threadID,
                () => fs.unlinkSync(imagePath),
                messageID
            );
        } catch (error) {
            console.error(error);
            return api.sendMessage(`‚ùå L·ªói khi ch·ª•p ·∫£nh: ${error.message}`, threadID, messageID);
        }
    },
};