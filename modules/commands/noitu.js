exports.config = {
    name: 'noitu',
    version: '1.4.0',
    hasPermssion: 0,
    credits: 'DC-Nam',
    description: 'Game n·ªëi ch·ªØ, ch∆°i v·ªõi bot ho·∫∑c v·ªõi ng∆∞·ªùi kh√°c!',
    commandCategory: 'game',
    usages: 'noitu + [bot/ng∆∞·ªùi] + ti·ªÅn > 10000 VNƒê',
    cooldowns: 3
};

const fs = require('fs');
const path = __dirname + '/cache/noitu.txt';
let data = [];

const word_valid = word => /^[a-zA-Z√†-·ªπ√Ä-·ª∏]+ [a-zA-Z√†-·ªπ√Ä-·ª∏]+$/.test(word);

const save = () => fs.writeFileSync(path, data.join(','), 'utf8');
const stream_url = async url => (await require('axios').get(url, { responseType: 'stream' })).data;

exports.onLoad = async () => {
    if (!fs.existsSync(path)) {
        data = (await require('axios').get('https://raw.githubusercontent.com/J-JRT/api2/mainV2/linkword.json')).data.split(',').filter(word_valid);
        fs.writeFileSync(path, data.join(','), 'utf8'); // L∆∞u d·ªØ li·ªáu m·ªõi v√†o cache/noitu.txt
    } else {
        data = fs.readFileSync(path, 'utf8').split(',').filter(word_valid);
    }
};

exports.handleReply = async ({ handleReply: session, event, api, Currencies }) => {
    const word = (event.body || '').split(' ');
    const send = msg => api.sendMessage(msg, event.threadID, event.messageID);

    if (![session.player1, session.player2].includes(event.senderID)) return;

    const currentPlayer = event.senderID === session.player1 ? session.player1 : session.player2;
    const nextPlayer = event.senderID === session.player1 ? session.player2 : session.player1;

    if (!word_valid(word.join(' '))) return send(`[‚ö†Ô∏è] ‚ûú T·ª´ kh√¥ng h·ª£p l·ªá!`);
    if (word[0].toLowerCase() !== session.last_word.split(' ')[1].toLowerCase()) {
        send(`[‚ùå] ‚ûú Ng∆∞·ªùi ch∆°i ${currentPlayer} ƒë√£ thua!`);
        session.winner = nextPlayer;
        session.loser = currentPlayer;
        return announceWinner(session, api, Currencies);
    }

    session.last_word = word.join(' ');

    send(`Ng∆∞·ªùi ch∆°i ${nextPlayer}, ƒë·∫øn l∆∞·ª£t b·∫°n n·ªëi t·ª´ ti·∫øp!`, (err, res) => {
        res.type = 'reply';
        res.player1 = session.player1;
        res.player2 = session.player2;
        res.last_word = session.last_word;
        res.bet = session.bet;
        client.handleReply.push(res);
    });
};

const announceWinner = async (session, api, Currencies) => {
    if (!session.winner) return;

    const prize = session.bet * 2;
    await Currencies.increaseMoney(session.winner, prize);
    await Currencies.decreaseMoney(session.loser, session.bet);

    api.sendMessage(
        `üéâ K·∫øt qu·∫£ sau 10 ph√∫t:\n[üèÜ] ‚ûú Ng∆∞·ªùi th·∫Øng: ${session.winner}\n[‚ùå] ‚ûú Ng∆∞·ªùi thua: ${session.loser}\n[üí∞] ‚ûú S·ªë ti·ªÅn th·∫Øng: ${prize} VNƒê`,
        session.threadID
    );

    delete gameSessions[session.threadID];
};

exports.run = async ({ event, api, args, Currencies }) => {
    const send = msg => api.sendMessage(msg, event.threadID, event.messageID);
    const bet = parseInt(args[1]) || 0;

    if (!['bot', 'ng∆∞·ªùi'].includes(args[0])) return send(`[‚ö†Ô∏è] ‚ûú Ch·ªçn ch·∫ø ƒë·ªô ch∆°i: "bot" ho·∫∑c "ng∆∞·ªùi"!`);
    if (bet < 10000 || bet > (await Currencies.getData(event.senderID)).money) {
        return send(`[‚ö†Ô∏è] ‚ûú B·∫°n ph·∫£i c∆∞·ª£c √≠t nh·∫•t 10,000 VNƒê ƒë·ªÉ ch∆°i!`);
    }

    if (args[0] === 'ng∆∞·ªùi') {
        const mention = Object.keys(event.mentions)[0];
        if (!mention) return send(`[‚ö†Ô∏è] ‚ûú H√£y tag ng∆∞·ªùi b·∫°n mu·ªën ch∆°i c√πng!`);
        if (mention === event.senderID) return send(`[‚ö†Ô∏è] ‚ûú Kh√¥ng th·ªÉ t·ª± ch∆°i v·ªõi ch√≠nh m√¨nh!`);

        const first_word = data[Math.floor(Math.random() * data.length)];
        gameSessions[event.threadID] = {
            player1: event.senderID,
            player2: mention,
            last_word: first_word,
            bet,
            winner: null,
            loser: null,
        };

        send({
            body: `=== „Äé GAME N·ªêI T·ª™ „Äè ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üíµ] ‚ûú S·ªë ti·ªÅn c∆∞·ª£c: ${bet} VNƒê\n[üë•] ‚ûú Ng∆∞·ªùi ch∆°i 1: ${event.senderID}\n[üë•] ‚ûú Ng∆∞·ªùi ch∆°i 2: ${mention}\n[üìù] ‚ûú T·ª´ b·∫Øt ƒë·∫ßu: ${first_word}\n[‚è≥] ‚ûú Game s·∫Ω k·∫øt th√∫c sau 10 ph√∫t n·∫øu kh√¥ng c√≥ ai thua tr∆∞·ªõc.`,
        });

        setTimeout(() => {
            if (gameSessions[event.threadID]) {
                announceWinner(gameSessions[event.threadID], api, Currencies);
            }
        }, 10 * 60 * 1000); // 10 ph√∫t
    } else if (args[0] === 'bot') {
        const first_word = data[Math.floor(Math.random() * data.length)];
        gameSessions[event.threadID] = {
            player1: event.senderID,
            player2: 'bot',
            last_word: first_word,
            bet,
            winner: null,
            loser: null,
        };

        send({
            body: `=== „Äé GAME N·ªêI T·ª™ „Äè ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üíµ] ‚ûú S·ªë ti·ªÅn c∆∞·ª£c: ${bet} VNƒê\n[üë•] ‚ûú Ng∆∞·ªùi ch∆°i 1: ${event.senderID}\n[üë•] ‚ûú Ng∆∞·ªùi ch∆°i 2: Bot\n[üìù] ‚ûú T·ª´ b·∫Øt ƒë·∫ßu: ${first_word}\n[‚è≥] ‚ûú Game s·∫Ω k·∫øt th√∫c sau 10 ph√∫t n·∫øu kh√¥ng c√≥ ai thua tr∆∞·ªõc.`,
        });

        setTimeout(() => {
            if (gameSessions[event.threadID]) {
                announceWinner(gameSessions[event.threadID], api, Currencies);
            }
        }, 10 * 60 * 1000); // 10 ph√∫t
    } else {
        send(`[‚ùå] ‚ûú Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ ch∆°i gi·ªØa ng∆∞·ªùi ch∆°i v√† Bot.`);
    }
};