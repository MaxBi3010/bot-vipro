const axios = require('axios');
const instagram = require('./../../utils/ig.js')

module.exports.config = {
        name: "ig",
        version: "1.0.0",
        hasPermssion: 0,
        credits: "Panna",
        description: "T√¨m ki·∫øm v√† xem b√†i ƒëƒÉng Instagram",
        commandCategory: "Ti·ªán √≠ch",
        usages: "ig post <username> - Xem b√†i ƒëƒÉng c·ªßa ng∆∞·ªùi d√πng\nig search <t·ª´ kh√≥a> - T√¨m ki·∫øm ng∆∞·ªùi d√πng\nig reel - Xem reel ng·∫´u nhi√™n",
        cooldowns: 5,
        hasPrefix: true
    };

    module.exports.run = async function ({ api, event, msg, args }) {;
        const fs = require('fs');
        const path = require('path');
        
        if (!args[0]) return api.sendMessage("‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng:\n‚Ä¢ ig post <username>\n‚Ä¢ ig search <t·ª´ kh√≥a>\n‚Ä¢ ig cookie <cookie> (ch·ªâ admin)\n‚Ä¢ ig reel - Xem reel ng·∫´u nhi√™n", event.threadID);
        
        const command = args[0].toLowerCase();
        const query = args.slice(1).join(" ");
        
        try {

            if (command === "reel") {
                const reels = await instagram.reel();
                if (!reels || !reels.clips || reels.clips.length === 0) {
                    return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y reels n√†o", event.threadID);
                }
                const randomReel = reels.clips[Math.floor(Math.random() * reels.clips.length)];              
                let msgBody = `üì± Reel t·ª´ @${randomReel.user.username}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
                msgBody += `üìù N·ªôi dung: ${randomReel.caption || "Kh√¥ng c√≥ ch√∫ th√≠ch"}\n\n`;
                msgBody += `üëç ${randomReel.likeCount} l∆∞·ª£t th√≠ch\n`;
                msgBody += `üí¨ ${randomReel.commentCount} b√¨nh lu·∫≠n\n`;
                if (randomReel.hasAudio) msgBody += `üîä C√≥ √¢m thanh\n`;
                msgBody += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
                if (randomReel.video && randomReel.video.url) {
                    const stream = await axios({
                   url: randomReel.video.url,
                      method: 'GET',
                    responseType: 'stream'
                      }).then(response => response.data);

                     if (stream) {
                     return api.sendMessage({
                        body: msgBody,
                        attachment: stream
                        }, event.threadID);
                    } else {
                        return api.sendMessage(msgBody + "\n‚ùå Kh√¥ng th·ªÉ t·∫£i video", event.threadID);
                    }
                } else {
                    return api.sendMessage(msgBody + "\n‚ùå Kh√¥ng t√¨m th·∫•y video", event.threadID);
                }
            }            
            if (!query) return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p username ho·∫∑c t·ª´ kh√≥a", event.threadID);           
            if (command === "post") {
                const posts = await instagram.post(query);
                if (!posts || !posts.length) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng n√†o", event.threadID);
                let msg = `üì± Danh s√°ch b√†i ƒëƒÉng c·ªßa @${query}:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
                posts.forEach((post, index) => {
                    msg += `${index + 1}. ${post.caption ? post.caption.slice(0, 65) + (post.caption.length > 65 ? '...' : '') : 'Kh√¥ng c√≥ ch√∫ th√≠ch'}\n`;
                    msg += `üëç ${post.stats?.likes || 0} th√≠ch ‚Ä¢ üí¨ ${post.stats?.comments || 0} b√¨nh lu·∫≠n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
                });
                msg += "\nüëâ Ph·∫£n h·ªìi s·ªë th·ª© t·ª± ƒë·ªÉ xem b√†i ƒëƒÉng";
                
                return api.sendMessage(msg, event.threadID, (err, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        posts: posts,
                        type: "postList",
                        username: query
                    });
                });
            } else if (command === "search") {
                const results = await instagram.search(query);
                if (!results || !results.length) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o", event.threadID);
                
                let msg = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho "${query}":\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
                results.forEach((user, index) => {
                    msg += `${index + 1}. ${user.fullName}\n`;
                    msg += `üë§ @${user.username}\n`;
                    if (user.isVerified) msg += "‚úì ƒê√£ x√°c minh\n";
                    msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
                });
                msg += "\nüëâ Ph·∫£n h·ªìi s·ªë th·ª© t·ª± ƒë·ªÉ xem b√†i ƒëƒÉng";
                
                return api.sendMessage(msg, event.threadID, (err, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        users: results,
                        type: "searchResult"
                    });
                });
            }
        } catch (error) {
            return api.sendMessage(`‚ùå L·ªói: ${error.message}`, event.threadID);
        }
    }

    module.exports.handleReply = async function ({ api, event, handleReply }) {
        const { type } = handleReply;

        try {
            if (type === "searchResult") {
                const { users, messageID } = handleReply;
                const userIndex = parseInt(event.body) - 1;
                
                if (isNaN(userIndex) || userIndex < 0 || userIndex >= users.length) {
                    return api.sendMessage("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá", event.threadID);
                }

                await api.unsendMessage(messageID);
                const username = users[userIndex].username;
const url = `https://thanhquang.io.vn/instagram/post?q=${encodeURIComponent(username)}`;
const response = await axios.get(url);
const posts = response.data;
                
                if (!posts || !posts.length) {
                    return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng n√†o", event.threadID);
                }

                let msg = `üì± Danh s√°ch b√†i ƒëƒÉng c·ªßa @${users[userIndex].username}:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
                posts.forEach((post, index) => {
                    msg += `${index + 1}. ${post.caption ? post.caption.slice(0, 65) + (post.caption.length > 65 ? '...' : '') : 'Kh√¥ng c√≥ ch√∫ th√≠ch'}\n`;
                    msg += `üëç ${post.stats?.likes || 0} th√≠ch ‚Ä¢ üí¨ ${post.stats?.comments || 0} b√¨nh lu·∫≠n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
                });
                msg += "\nüëâ Ph·∫£n h·ªìi s·ªë th·ª© t·ª± ƒë·ªÉ xem b√†i ƒëƒÉng";
                
                return api.sendMessage(msg, event.threadID, (err, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: event.senderID,
                        posts: posts,
                        type: "postList",
                        username: users[userIndex].username
                    });
                });
            } else if (type === "postList") {
                const { posts, username, messageID } = handleReply;
                const postIndex = parseInt(event.body) - 1;
                
                if (isNaN(postIndex) || postIndex < 0 || postIndex >= posts.length) {
                    return api.sendMessage("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá", event.threadID);
                }

                await api.unsendMessage(messageID);
                const post = posts[postIndex];
                let msgBody = `üì± B√†i ƒëƒÉng t·ª´ @${username}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
                msgBody += `üìù N·ªôi dung: ${post.caption || "Kh√¥ng c√≥ ch√∫ th√≠ch"}\n\n`;
                msgBody += `üëç ${post.stats?.likes || 0} l∆∞·ª£t th√≠ch\n`;
                msgBody += `üí¨ ${post.stats?.comments || 0} b√¨nh lu·∫≠n\n`;
                msgBody += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
                
                if (post.media && post.media.length > 0) {
                    const mediaUrls = post.media.map(m => m.url).filter(url => url && typeof url === 'string');
                    if (mediaUrls.length > 0) {
                        const streams = await Promise.all(mediaUrls.map(async url => {
    try {
        const response = await axios({
            url,
            method: 'GET',
            responseType: 'stream'
        });

        return response.data; 
    } catch (error) {
        console.error(`Error streaming URL ${url}:`, error);
        return null; 
    }
                        }));
                        await api.sendMessage({ 
                            body: msgBody, 
                            attachment: streams.filter(stream => stream) 
                        }, event.threadID);
                    } else {
                        await api.sendMessage(msgBody, event.threadID);
                    }
                } else {
                    await api.sendMessage(msgBody, event.threadID);
                }
            }
        } catch (error) {
            return api.sendMessage(`‚ùå L·ªói: ${error.message}`, event.threadID);
        }
    };