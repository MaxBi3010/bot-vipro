const axios = require('axios');

module.exports.config = {
    name: "ttt",
    version: "2.0.0",
    hasPermssion: 0,
    credits: "88",
    description: "Xem th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ",
    commandCategory: "Ng∆∞·ªùi d√πng",
    usages: "[ƒë·ªãa ƒëi·ªÉm]",
    cooldowns: 5,
    dependencies: {
        "axios": ""
    }
};

async function sendWeather(api, threadID, location = "Hanoi") {
    try {
        // G·ªçi API l·∫•y th√¥ng tin th·ªùi ti·∫øt
        const response = await axios.get(`https://api.popcat.xyz/weather?q=${encodeURIComponent(location)}`);
        const weatherData = response.data[0];

        if (!weatherData || !weatherData.location || !weatherData.current) {
            return api.sendMessage(`Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm: ${location}. Vui l√≤ng th·ª≠ l·∫°i.`, threadID);
        }

        const { location: loc, current, forecast } = weatherData;

        // Chu·∫©n b·ªã n·ªôi dung tin nh·∫Øn th·ªùi ti·∫øt
        let message = `
üå§Ô∏è Th·ªùi ti·∫øt t·∫°i ${loc.name} (${loc.lat}, ${loc.long}):
- Nhi·ªát ƒë·ªô hi·ªán t·∫°i: ${current.temperature}¬∞${loc.degreetype} (C·∫£m gi√°c: ${current.feelslike}¬∞)
- T√¨nh tr·∫°ng: ${current.skytext}
- ƒê·ªô ·∫©m: ${current.humidity}%
- T·ªëc ƒë·ªô gi√≥: ${current.winddisplay}
- Th·ªùi gian quan s√°t: ${current.observationtime}

üå•Ô∏è D·ª± b√°o th·ªùi ti·∫øt:
        `;

        forecast.slice(0, 3).forEach(day => {
            message += `
- ${day.day} (${day.date}): ${day.skytextday}, Nhi·ªát ƒë·ªô: ${day.low}¬∞ - ${day.high}¬∞${loc.degreetype}, M∆∞a: ${day.precip}%`;
        });

        // G·ª≠i tin nh·∫Øn th·ªùi ti·∫øt
        api.sendMessage(message, threadID);
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt:", error.message);
        api.sendMessage("L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
    }
}

module.exports.run = async function ({ api, event, args }) {
    const location = args.join(" ") || "Hanoi";
    await sendWeather(api, event.threadID, location);
};
