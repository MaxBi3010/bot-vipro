module.exports.config = {
  name: "out",
  version: "1.0.6",
  hasPermission: 3,
  credits: "KyPhan",
  description: "Qu·∫£n l√Ω ch·ª©c nƒÉng r·ªùi nh√≥m: xem danh s√°ch, r·ªùi nh√≥m c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£",
  commandCategory: "Admin",
  usages: "out [list|box|all|ID nh√≥m]",
  cooldowns: 5,
  dependencies: "",
};

module.exports.run = async function ({ api, event, args }) {
  try {
    if (!args[0]) {
      // Hi·ªÉn th·ªã b·∫£ng ch·ª©c nƒÉng
      const helpMessage = `üî∞ Ch·ªçn ch·ª©c nƒÉng:
1. out list: Hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m bot ƒëang tham gia.
2. out box: R·ªùi nh√≥m hi·ªán t·∫°i.
3. out all: R·ªùi t·∫•t c·∫£ c√°c nh√≥m.
4. out [ID nh√≥m]: R·ªùi nh√≥m theo ID ch·ªâ ƒë·ªãnh.`;
      return api.sendMessage(helpMessage, event.threadID);
    }

    if (args[0] === "list") {
      // Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c nh√≥m
      const allThreads = await api.getThreadList(100, null, ["INBOX"]);
      const groupThreads = allThreads.filter(thread => thread.isGroup);

      let listMsg = "üî∞ Danh s√°ch c√°c nh√≥m bot ƒëang tham gia:\n";
      let index = 1;
      let threadIDs = {};

      groupThreads.forEach(thread => {
        listMsg += `${index}. ${thread.name || "Kh√¥ng t√™n"} (ID: ${thread.threadID})\n`;
        threadIDs[index] = thread.threadID;
        index++;
      });

      listMsg += "\nNh·∫≠p s·ªë th·ª© t·ª± (stt) ƒë·ªÉ ch·ªçn nh√≥m mu·ªën r·ªùi.";

      api.sendMessage(listMsg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: event.senderID,
          threadIDs: threadIDs,
          step: 1
        });
      });
    } else if (args[0] === "box") {
      // R·ªùi nh√≥m hi·ªán t·∫°i
      const reason = args.slice(1).join(" ") || "Kh√¥ng c√≥ l√Ω do.";
      const idbox = event.threadID;

      // Th√¥ng b√°o tr∆∞·ªõc khi r·ªùi nh√≥m
      await api.sendMessage(`‚úÖ ƒê√£ nh·∫≠n l·ªánh r·ªùi nh√≥m t·ª´ Admin, l√Ω do: ${reason}`, idbox);

      // R·ªùi nh√≥m
      await api.removeUserFromGroup(api.getCurrentUserID(), idbox);
      api.sendMessage(`‚úÖ ƒê√£ r·ªùi nh√≥m hi·ªán t·∫°i v·ªõi l√Ω do: ${reason}`, event.threadID);
    } else if (args[0] === "all") {
      // R·ªùi t·∫•t c·∫£ c√°c nh√≥m
      const allThreads = await api.getThreadList(100, null, ["INBOX"]);
      const groupThreads = allThreads.filter(thread => thread.isGroup);

      for (const thread of groupThreads) {
        const idbox = thread.threadID;
        const reason = args.slice(1).join(" ") || "Kh√¥ng c√≥ l√Ω do.";

        // Th√¥ng b√°o tr∆∞·ªõc khi r·ªùi nh√≥m
        await api.sendMessage(`‚úÖ ƒê√£ nh·∫≠n l·ªánh r·ªùi nh√≥m t·ª´ Admin, l√Ω do: ${reason}`, idbox);

        // R·ªùi nh√≥m
        await api.removeUserFromGroup(api.getCurrentUserID(), idbox);
      }

      api.sendMessage("‚úÖ ƒê√£ r·ªùi t·∫•t c·∫£ c√°c nh√≥m.", event.threadID);
    } else if (!isNaN(args[0])) {
      // R·ªùi nh√≥m theo ID ch·ªâ ƒë·ªãnh
      const idbox = args[0];
      const reason = args.slice(1).join(" ") || "Kh√¥ng c√≥ l√Ω do.";

      // Th√¥ng b√°o tr∆∞·ªõc khi r·ªùi nh√≥m
      await api.sendMessage(`‚úÖ ƒê√£ nh·∫≠n l·ªánh r·ªùi nh√≥m t·ª´ Admin, l√Ω do: ${reason}`, idbox);

      // R·ªùi nh√≥m
      await api.removeUserFromGroup(api.getCurrentUserID(), idbox);
      api.sendMessage(`‚úÖ ƒê√£ r·ªùi nh√≥m c√≥ ID: ${idbox} v·ªõi l√Ω do: ${reason}`, event.threadID);
    } else {
      api.sendMessage("‚õî L·ªánh kh√¥ng h·ª£p l·ªá! H√£y th·ª≠ l·∫°i.", event.threadID);
    }
  } catch (error) {
    api.sendMessage(`‚õî ƒê√£ x·∫£y ra l·ªói: ${error.message}`, event.threadID);
  }
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
  try {
    if (event.senderID !== handleReply.author) return;

    if (handleReply.step === 1) {
      const index = parseInt(event.body);
      const idbox = handleReply.threadIDs[index];

      if (!idbox) return api.sendMessage("‚õî S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!", event.threadID);

      api.sendMessage("üí¨ Vui l√≤ng nh·∫≠p l√Ω do ƒë·ªÉ r·ªùi nh√≥m:", event.threadID, (err, info) => {
        global.client.handleReply.push({
          name: "out",
          messageID: info.messageID,
          author: event.senderID,
          threadID: idbox,
          step: 2
        });
      });
    } else if (handleReply.step === 2) {
      const reason = event.body || "Kh√¥ng c√≥ l√Ω do.";
      const idbox = handleReply.threadID;

      // Th√¥ng b√°o tr∆∞·ªõc khi r·ªùi nh√≥m
      await api.sendMessage(
        `‚úÖ ƒê√£ nh·∫≠n l·ªánh r·ªùi nh√≥m t·ª´ Admin, l√Ω do: ${reason}`,
        idbox
      );

      // X√≥a d·ªØ li·ªáu nh√≥m n·∫øu API h·ªó tr·ª£
      if (api.deleteGroupData) {
        await api.deleteGroupData(idbox);
      }

      // R·ªùi nh√≥m
      await api.removeUserFromGroup(api.getCurrentUserID(), idbox);

      api.sendMessage(`‚úÖ ƒê√£ r·ªùi nh√≥m c√≥ ID: ${idbox} v·ªõi l√Ω do: ${reason}`, event.threadID);
    }
  } catch (error) {
    api.sendMessage(`‚õî ƒê√£ x·∫£y ra l·ªói: ${error.message}`, event.threadID);
  }
};
